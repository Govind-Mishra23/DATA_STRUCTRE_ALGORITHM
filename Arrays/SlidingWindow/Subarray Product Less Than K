class Solution {
    public int numSubarrayProductLessThanK(int[] nums, int k) {
        if(k<=1) return  0 ;
        int l = 0 ; 
        int multi = 1 ; 
        int c = 0 ; 
        for (int r = 0 ; r<nums.length; r++){
            multi *= nums[r]; 
            while (multi >= k) {
                multi /= nums[l];
                l++;
            }
            c += r-l+1 ;
        }
        return c  ;
    }
}

The provided code defines a method numSubarrayProductLessThanK that calculates the number of contiguous subarrays in an array nums where the product of the elements is less than a given value k. The method first checks if k is less than or equal to 1, returning 0 if true, as no product can be less than 1. It then initializes two pointers, l (left) and r (right), to traverse the array, a variable multi to keep track of the product of the current subarray, and a counter c to count the valid subarrays. The method iterates through the array with the right pointer r, multiplying multi by the current element. If multi becomes greater than or equal to k, it divides multi by the element at the left pointer l and increments l until multi is less than k. For each valid subarray ending at r, it adds the number of such subarrays to c. Finally, the method returns the count c of all valid subarrays. This approach ensures an efficient solution with a time complexity of O(n).           