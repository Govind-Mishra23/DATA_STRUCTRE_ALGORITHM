class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        int i = 0 ;
        int j = arr.length-1 ; 
        while(i<=j){
            int mid = (i+j) / 2 ;
            if(mid == 0){
                if(arr[mid] > arr[mid+1]){
                    return mid ; 
                }else {
                    return mid+1 ;
                }
            }
            if(arr[mid] > arr[mid-1] && arr[mid] > arr[mid+1] ){
                return mid; 
            }else if(arr[mid] <arr[mid+1]){
                i = mid+1; 
            }else {
                j = mid-1 ;
            }
        }
        return 0;
    }
}
// Time Complexity : O(logn)

The provided code implements a binary search algorithm to find the peak index in a mountain array. It initializes two pointers, i and j, to the start and end of the array. The algorithm repeatedly calculates the middle index mid and checks if it is the peak by comparing it with its neighbors. If the middle element is greater than its neighbors, it returns mid as the peak index. If the middle element is less than the next element, it moves the left pointer i to mid + 1; otherwise, it moves the right pointer j to mid - 1. The process continues until the peak index is found, ensuring a time complexity of O(log n).