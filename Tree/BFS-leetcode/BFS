# Breadth-First Search (BFS) in Trees

Breadth-First Search (BFS) is an algorithm for traversing or searching tree or graph data structures. It starts at the tree root (or an arbitrary node in the case of a graph) and explores the neighbor nodes at the present depth prior to moving on to nodes at the next depth level.

## How BFS Works

1. **Initialization**: Start with the root node and put it in a queue.
2. **Processing**: Dequeue a node from the front of the queue, process it, and enqueue all its children (or neighbors in the case of a graph).
3. **Repetition**: Repeat the process until the queue is empty.

## BFS Algorithm

Here is a step-by-step algorithm for BFS:

1. Create a queue and enqueue the root node.
2. While the queue is not empty:
    - Dequeue a node from the front of the queue.
    - Process the dequeued node.
    - Enqueue all the children of the dequeued node.

## Example Code

Here is an example implementation of BFS for a tree in java:

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        if (root == null) {
            return list;
        }
        queue.offer(root);
        while (!queue.isEmpty()) {
            int levelSize = queue.size();
             List<Integer> current = new ArrayList<>();
            for (int i = 0; i < levelSize; i++) {
               
                TreeNode currentNode = queue.poll();
                current.add(currentNode.val) ;
                if(currentNode.left != null){
                    queue.offer(currentNode.left) ;
                }
                 if(currentNode.right != null){
                    queue.offer(currentNode.right) ;
                } 
            }
            list.add(current); 
        }
        return list ; 
    }
}